import { getBlobSha256 } from "./helpers/blob.js";
import { createDeleteAuth, createDownloadAuth, createListAuth, createUploadAuth, DeleteAuthOptions, DownloadAuthOptions, encodeAuthorizationHeader, ListAuthOptions, MirrorAuthOptions, UploadAuthOptions } from "./auth.js";
import { BlobDescriptor, PaymentHandlers as PaymentHandler, SignedEvent, Signer } from "./types.js";
import { mirrorBlob, MirrorOptions } from "./actions/mirror.js";
import { uploadBlob, UploadOptions } from "./actions/upload.js";
import { listBlobs, ListOptions } from "./actions/list.js";
import { downloadBlob, DownloadOptions } from "./actions/download.js";
import { deleteBlob, DeleteOptions } from "./actions/delete.js";
import { uploadMedia, UploadMediaOptions } from "./actions/media.js";
export type ServerType = string | URL;
export type UploadType = Blob | File | Buffer;
export declare class BlossomClient {
    server: URL;
    signer?: Signer;
    payment?: PaymentHandler<URL>;
    constructor(server: string | URL, signer?: Signer);
    static getFileSha256: typeof getBlobSha256;
    static createGetAuth: typeof createDownloadAuth;
    static createUploadAuth: typeof createUploadAuth;
    static createListAuth: typeof createListAuth;
    static createDeleteAuth: typeof createDeleteAuth;
    static encodeAuthorizationHeader: typeof encodeAuthorizationHeader;
    static mirrorBlob: typeof mirrorBlob;
    static uploadBlob: typeof uploadBlob;
    static listBlobs: typeof listBlobs;
    static downloadBlob: typeof downloadBlob;
    static deleteBlob: typeof deleteBlob;
    static uploadMedia: typeof uploadMedia;
    createDownloadAuth(hash: string, options?: DownloadAuthOptions): Promise<SignedEvent>;
    downloadBlob(hash: string, opts?: Omit<DownloadOptions<URL>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<Blob>;
    createUploadAuth(blob: string | UploadType, options?: UploadAuthOptions): Promise<SignedEvent>;
    uploadBlob<B extends UploadType>(blob: B, opts?: Omit<UploadOptions<URL, B>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<BlobDescriptor>;
    createMirrorAuth(blob: string | BlobDescriptor, options?: MirrorAuthOptions): Promise<SignedEvent>;
    mirrorBlob(blob: BlobDescriptor, opts?: Omit<MirrorOptions<URL>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<BlobDescriptor>;
    createMediaAuth(blob: string | UploadType, options?: Omit<UploadAuthOptions, "type">): Promise<SignedEvent>;
    uploadMedia<B extends UploadType>(blob: B, opts?: Omit<UploadMediaOptions<URL, B>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<BlobDescriptor>;
    static hasBlob(server: ServerType, hash: string): Promise<boolean>;
    hasBlob(hash: string): Promise<boolean>;
    createListAuth(options?: ListAuthOptions): Promise<SignedEvent>;
    listBlobs(pubkey: string, opts?: Omit<ListOptions<URL>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<BlobDescriptor[]>;
    createDeleteAuth(blob: string | UploadType, options?: DeleteAuthOptions): Promise<SignedEvent>;
    deleteBlob(hash: string, opts?: Omit<DeleteOptions<URL>, "onAuth" | "onPayment" | "auth"> & {
        auth?: SignedEvent | boolean;
        payment?: boolean;
    }): Promise<boolean>;
}
