import { ServerType, UploadType } from "../client.js";
import { BlobDescriptor } from "../types.js";
import { UploadOptions } from "./upload.js";
export type MultiServerUploadOptions<S extends ServerType, B extends UploadType> = UploadOptions<S, B> & {
    /**
     * Signals this blob should be treated as a media file and should attempt to use BUD-05 /media endpoint for upload on first server
     * @default false
     */
    isMedia?: boolean;
    /**
     * If isMedia is enabled, this determines how /media endpoints should be prioritized
     *  - "first" Only use the first server in the list to optimize the media
     *  - "any" Use any server in the list to optimize the media
     * @default "first"
     */
    mediaUploadBehavior?: "first" | "any";
    /**
     * If isMedia is enabled, should the raw blob be uploaded if no /media endpoint can be found
     * @default false
     */
    mediaUploadFallback?: boolean;
    /**
     * Timeout for mirror requests
     * @default 5000
     */
    mirrorTimeout?: number;
    /**
     * called on blob when uploaded to started to a server
     * @param server
     * @param sha256 the hash of the blob being uploaded or mirrored
     * @param blob the original blob
     */
    onStart?: (server: S, sha256: string, blob: B) => void;
    /** called when upload to a server is complete */
    onUpload?: (server: S, sha256: string, blob: B) => void;
    /** called when upload to a server fails */
    onError?: (server: S, sha256: string, blob: B, error: Error) => void;
};
/**
 * Creates an AsyncGenerator that can be used to upload a blob to multiple servers
 * @param servers A Set or Array of servers to upload to
 * @param blob The blob to be uploaded
 * @param signer An async function used for signing nostr events
 * @returns The BlobDescriptor if successful
 *
 * ```mermaid
 * flowchart LR
 *   isMedia{"isMedia"} -- yes --> media["/media"]
 *   isMedia -- no --> upload["/upload"]
 *   media --> ifmedia{"Successful"}
 *   ifmedia -- yes --> next["Next server"]
 *   ifmedia -- no --> iffallback{"fallback"}
 *   iffallback -- yes --> upload
 *   iffallback -- no --> abort
 *   upload -- complete --> next
 *   next --> uploaded{"Uploaded"}
 *   uploaded -- yes --> mirror["/mirror"]
 *   uploaded -- no --> upload
 *   mirror --> isMirror{"Successful"}
 *   isMirror -- yes --> next
 *   isMirror -- no --> ifMediaAbort{"isMedia"}
 *   ifMediaAbort -- no --> upload
 *   ifMediaAbort -- yes --> next
 * ```
 */
export declare function multiServerUpload<S extends ServerType, B extends UploadType>(servers: Iterable<S>, blob: B, opts?: MultiServerUploadOptions<S, B>): Promise<Map<S, BlobDescriptor>>;
