import { ServerType } from "../client.js";
import { BlobDescriptor, PaymentRequest, PaymentToken, SignedEvent } from "../types.js";
export type ListOptions<S extends ServerType> = {
    /** AbortSignal to cancel the action */
    signal?: AbortSignal;
    /** Override authorization event, or true to always use authorization, false to disable authorization */
    auth?: SignedEvent | boolean;
    /** Request timeout */
    timeout?: number;
    since?: number;
    until?: number;
    /**
     * A method used to request payment
     * @param server the server requiring payment
     * @param request the payment request
     */
    onPayment?: (server: S, request: PaymentRequest) => Promise<PaymentToken>;
    /**
     * A method used to request a signed auth event for a server
     * @param server the server requesting the auth
     */
    onAuth?: (server: S) => Promise<SignedEvent>;
};
/** Mirrors a blob to a server */
export declare function listBlobs<S extends ServerType>(server: S, pubkey: string, opts?: ListOptions<S>): Promise<BlobDescriptor[]>;
