import { ServerType } from "../client.js";
import { PaymentRequest, PaymentToken, SignedEvent } from "../types.js";
export type DownloadOptions<S extends ServerType> = {
    /** AbortSignal to cancel the action */
    signal?: AbortSignal;
    /** Override authorization event, or true to always use authorization, false to disable authorization */
    auth?: SignedEvent | boolean;
    /** Request timeout */
    timeout?: number;
    /**
     * A method used to request payment when downloading
     * @param server the server requiring payment
     * @param sha256 the sha256 of the blob being uploaded or mirrored
     * @param request the payment request
     */
    onPayment?: (server: S, sha256: string, request: PaymentRequest) => Promise<PaymentToken>;
    /**
     * A method used to request a signed auth event for a server and sha256
     * @param server the server requesting the auth
     * @param sha256 the sha256 of the blob being upload or mirror to the server
     */
    onAuth?: (server: S, sha256: string) => Promise<SignedEvent>;
};
/** Downloads a blob from a server and returns the Response */
export declare function downloadBlob<S extends ServerType>(server: S, hash: string, opts?: DownloadOptions<S>): Promise<Response>;
