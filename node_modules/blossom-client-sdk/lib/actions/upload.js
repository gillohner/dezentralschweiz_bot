import { encodeAuthorizationHeader } from "../auth.js";
import HTTPError from "../error.js";
import { fetchWithTimeout, getBlobSha256, getBlobSize, getBlobType } from "../helpers/index.js";
/** Upload a blob to a server, handles payment and auth */
export async function uploadBlob(server, blob, opts) {
    const url = new URL("/upload", server);
    const sha256 = await getBlobSha256(blob);
    const headers = {
        "X-SHA-256": sha256,
    };
    // attach the authorization if its already set
    if (opts?.auth) {
        if (typeof opts.auth === "boolean") {
            if (!opts.onAuth)
                throw new Error("Missing onAuth handler");
            headers["Authorization"] = encodeAuthorizationHeader(await opts.onAuth(server, sha256, "upload", blob));
        }
        else {
            headers["Authorization"] = encodeAuthorizationHeader(opts.auth);
        }
    }
    // build check headers
    const checkHeaders = {
        ...headers,
        "X-Content-Length": String(getBlobSize(blob)),
    };
    const type = getBlobType(blob);
    if (type)
        checkHeaders["X-Content-Type"] = type;
    // check upload with HEAD /upload
    let firstTry = await fetchWithTimeout(url, {
        method: "HEAD",
        signal: opts?.signal,
        headers: checkHeaders,
        timeout: opts?.timeout,
    });
    let upload = undefined;
    if (firstTry.status === 404) {
        // BUD-06 HEAD endpoint is not supported. attempt to upload
        upload = firstTry = await fetchWithTimeout(url, {
            body: blob,
            method: "PUT",
            signal: opts?.signal,
            timeout: opts?.timeout,
        });
    }
    // handle auth and payment
    switch (firstTry.status) {
        case 401: {
            // throw an error if auth is requested and disabled
            if (opts?.auth === false)
                throw new Error("Authorization disabled");
            // Request authorization event for this upload
            const auth = await opts?.onAuth?.(server, sha256, "upload", blob);
            if (!auth)
                throw new Error("Missing auth handler");
            // Try upload with auth
            upload = await fetchWithTimeout(url, {
                method: "PUT",
                body: blob,
                headers: { ...headers, Authorization: encodeAuthorizationHeader(auth) },
                signal: opts?.signal,
                timeout: opts?.timeout,
            });
            break;
        }
        case 402: {
            if (!opts?.onPayment)
                throw new Error("Missing payment handler");
            const { getEncodedToken } = await import("@cashu/cashu-ts");
            const { getPaymentRequestFromHeaders } = await import("../helpers/cashu.js");
            const request = getPaymentRequestFromHeaders(firstTry.headers);
            const token = await opts.onPayment(server, sha256, blob, request);
            const payment = getEncodedToken(token);
            // Try upload with payment
            upload = await fetchWithTimeout(url, {
                method: "PUT",
                body: blob,
                headers: { ...headers, "X-Cashu": payment },
                signal: opts?.signal,
                timeout: opts?.timeout,
            });
            break;
        }
    }
    if (firstTry.status >= 500)
        throw new Error("Server error");
    // check passed, upload
    if (!upload)
        upload = await fetchWithTimeout(url, {
            method: "PUT",
            body: blob,
            headers: { ...headers },
            signal: opts?.signal,
            timeout: opts?.timeout,
        });
    // handle errors
    await HTTPError.handleErrorResponse(upload);
    // return blob descriptor
    return upload.json();
}
