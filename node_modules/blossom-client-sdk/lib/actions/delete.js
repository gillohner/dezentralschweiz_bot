import { encodeAuthorizationHeader } from "../auth.js";
import HTTPError from "../error.js";
import { fetchWithTimeout } from "../helpers/fetch.js";
/** Deletes a blob to a server */
export async function deleteBlob(server, hash, opts) {
    const url = new URL("/" + hash, server);
    const headers = {};
    // attach the authorization if its already set
    if (opts?.auth) {
        if (typeof opts.auth === "boolean") {
            if (!opts.onAuth)
                throw new Error("Missing onAuth handler");
            headers["Authorization"] = encodeAuthorizationHeader(await opts.onAuth(server, hash));
        }
        else {
            headers["Authorization"] = encodeAuthorizationHeader(opts.auth);
        }
    }
    let res = await fetchWithTimeout(url, {
        method: "DELETE",
        headers,
        signal: opts?.signal,
        timeout: opts?.timeout,
    });
    // handle auth and payment
    switch (res.status) {
        case 401: {
            // throw an error if authorization is required but disabled
            if (opts?.auth === false)
                throw new Error("Authorization disabled");
            // request authorization for this request
            const auth = await opts?.onAuth?.(server, hash);
            if (!auth)
                throw new Error("Missing auth handler");
            // Try delete with auth
            res = await fetchWithTimeout(url, {
                signal: opts?.signal,
                method: "DELETE",
                headers: { ...headers, Authorization: encodeAuthorizationHeader(auth) },
                timeout: opts?.timeout,
            });
            break;
        }
        case 402: {
            if (!opts?.onPayment)
                throw new Error("Missing payment handler");
            const { getEncodedToken } = await import("@cashu/cashu-ts");
            const { getPaymentRequestFromHeaders } = await import("../helpers/cashu.js");
            const request = getPaymentRequestFromHeaders(res.headers);
            const token = await opts.onPayment(server, hash, request);
            const payment = getEncodedToken(token);
            // Try delete with payment
            res = await fetchWithTimeout(url, {
                signal: opts?.signal,
                method: "DELETE",
                headers: { ...headers, "X-Cashu": payment },
                timeout: opts?.timeout,
            });
            break;
        }
    }
    // handle errors
    await HTTPError.handleErrorResponse(res);
    // return blob descriptor
    return res.ok;
}
