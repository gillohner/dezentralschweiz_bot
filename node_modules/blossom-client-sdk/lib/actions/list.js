import HTTPError from "../error.js";
import { encodeAuthorizationHeader } from "../auth.js";
import { fetchWithTimeout } from "../helpers/index.js";
/** Mirrors a blob to a server */
export async function listBlobs(server, pubkey, opts) {
    const url = new URL(`/list/` + pubkey, server);
    if (opts?.since)
        url.searchParams.append("since", String(opts.since));
    if (opts?.until)
        url.searchParams.append("until", String(opts.until));
    // attach the auth if its already set
    const headers = {};
    // attach the authorization if its already set
    if (opts?.auth) {
        if (typeof opts.auth === "boolean") {
            if (!opts.onAuth)
                throw new Error("Missing onAuth handler");
            headers["Authorization"] = encodeAuthorizationHeader(await opts.onAuth(server));
        }
        else {
            headers["Authorization"] = encodeAuthorizationHeader(opts.auth);
        }
    }
    let list = await fetchWithTimeout(url, { headers, signal: opts?.signal, timeout: opts?.timeout });
    // handle auth and payments
    switch (list.status) {
        case 401: {
            // throw an error if auth is requested and disabled
            if (opts?.auth === false)
                throw new Error("Authorization disabled");
            const auth = await opts?.onAuth?.(server);
            if (!auth)
                throw new Error("Missing auth handler");
            // Try list with auth
            list = await fetchWithTimeout(url, {
                headers: { ...headers, Authorization: encodeAuthorizationHeader(auth) },
                signal: opts?.signal,
                timeout: opts?.timeout,
            });
            break;
        }
        case 402: {
            if (!opts?.onPayment)
                throw new Error("Missing payment handler");
            const { getEncodedToken } = await import("@cashu/cashu-ts");
            const { getPaymentRequestFromHeaders } = await import("../helpers/cashu.js");
            const request = getPaymentRequestFromHeaders(list.headers);
            const token = await opts.onPayment(server, request);
            const payment = getEncodedToken(token);
            // Try list with payment
            list = await fetchWithTimeout(url, {
                headers: { ...headers, "X-Cashu": payment },
                signal: opts?.signal,
                timeout: opts?.timeout,
            });
            break;
        }
    }
    // handle errors
    await HTTPError.handleErrorResponse(list);
    // return blob descriptor
    return list.json();
}
