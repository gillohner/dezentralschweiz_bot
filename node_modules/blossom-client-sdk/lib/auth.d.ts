import { ServerType, UploadType } from "./client.js";
import { SignedEvent, Signer } from "./types.js";
export declare const now: () => number;
export declare const oneHour: () => number;
/** Encodes an auth event into a nostr authorization header */
export declare function encodeAuthorizationHeader(event: SignedEvent): string;
/** Checks if an auth event matches a server / blob upload */
export declare function doseAuthMatchBlob(auth: SignedEvent, server: ServerType, blob: string | UploadType, type?: string): Promise<boolean>;
/** @deprecated Use `doseAuthMatchBlob` instead */
export declare const doseAuthMatchUpload: typeof doseAuthMatchBlob;
export type AuthType = "upload" | "list" | "delete" | "get" | "media";
export type AuthEventOptions = {
    blobs?: string | string[] | UploadType | UploadType[];
    servers?: string | string[];
    message?: string;
    expiration?: number;
};
/** Generic auth event builder */
export declare function createAuthEvent(signer: Signer, type: AuthType, options?: AuthEventOptions): Promise<SignedEvent>;
export type DownloadAuthOptions = Omit<AuthEventOptions, "blobs" | "servers">;
/** Creates a GET auth event */
export declare function createDownloadAuth(signer: Signer, serverOrHash: string | string[] | UploadType | UploadType[], options?: DownloadAuthOptions): Promise<SignedEvent>;
export type UploadAuthOptions = Omit<AuthEventOptions, "blobs"> & {
    type?: "upload" | "media";
};
/** Creates an upload or media upload auth event */
export declare function createUploadAuth(signer: Signer, blobs: string | string[] | UploadType | UploadType[], options?: UploadAuthOptions): Promise<SignedEvent>;
export type MirrorAuthOptions = Omit<AuthEventOptions, "blobs">;
/** Creates an upload or media upload auth event */
export declare function createMirrorAuth(signer: Signer, blobs: string | string[] | UploadType | UploadType[], options?: MirrorAuthOptions): Promise<SignedEvent>;
export type ListAuthOptions = Omit<AuthEventOptions, "blobs">;
/** Creates a list auth event */
export declare function createListAuth(signer: Signer, options?: ListAuthOptions): Promise<SignedEvent>;
export type DeleteAuthOptions = Omit<AuthEventOptions, "blobs">;
/** Creates a "delete" auth event for a specific hash */
export declare function createDeleteAuth(signer: Signer, blobs: string | string[] | UploadType | UploadType[], options?: DeleteAuthOptions): Promise<SignedEvent>;
